#include <iostream>

class vec {
private:
    int v_size = 0;
    int v_capacity = 0;
    int *data = nullptr;
public:
    class iter {
    private:
        int *ad_value;
    public:
        iter()
        {
            ad_value = nullptr;
        }

        iter(int *i)
        {
            ad_value = i;
        }

        int operator* ()
        {
            return *ad_value;
        }

        iter & operator=(int * d)
        {
            ad_value = d;

            return *this;
        }

        iter &operator++()
        {
            ad_value++;
            return *this;
        }

        iter operator++(int)
        {
            iter tmp(this->ad_value);
            ad_value++;

            return tmp;
        }

        bool operator!= (const iter &other)
        {
            return this->ad_value != other.ad_value;
        }
    };

    ~vec()
    {
        delete [] data;
    }

    int size()
    {
        return v_size;
    }

    int capacity()
    {
        return v_capacity;
    }

    int & at (int x)
    {
        return data[x];
    }

    int pop_back()
    {
        v_size--;
        int value = data[v_size];
            
        return value;
    }

    void push_back(int i)
    {
        if (!data)
        {
            data = new int;
            v_capacity = 1;
        }
        else
        {
            if (v_size == v_capacity)
            {
                int i;
                int nCapacity = capacity() + 1;
                int *nData = new int[nCapacity];

                for (i = 0; i <= v_size; i++)
                    nData[i] = data[i];

                delete [] data;
                data = nData;
                v_capacity = nCapacity;
            }
        }

        data[v_size++] = i;
    }

    iter begin()
    {
        iter beginning = iter(data);
        return beginning;
    }

    iter end()
    {
        iter ending = iter(data+size());
        return ending;
    }
};

int main(void)
{
    int i;
    vec v;
    vec::iter it;

    v.push_back(3);
    v.push_back(6);
    v.push_back(-10);
    v.push_back(7);
    v.push_back(2);
    v.push_back(1);
    v.push_back(4);

    std::cout << "v.size() = " << v.size() << std::endl;
    std::cout << "v.capacity() = " << v.capacity() << std::endl;

    for(i = 0,it = v.begin(); it != v.end(); i++, it++)
        std::cout << "v[" << i << "] = " << *it << std::endl;

    v.pop_back();

    std::cout << std::endl;
    std::cout << "v.size() = " << v.size() << std::endl;
    std::cout << "v.capacity() = " << v.capacity() << std::endl;

    for(i = 0,it = v.begin(); it != v.end(); i++, it++)
        std::cout << "v[" << i << "] = " << *it << std::endl;

    return 0;
}
