#include <iostream>
#include <math.h>

using namespace std;

template<class T>
class Vector2D {
public:
    Vector2D(T x = 0, T y = 0) : v_x{x}, v_y{y} {}
    Vector2D(const Vector2D& other)
    {
        this->v_x = other.v_x;
        this->v_y = other.v_y;
    }
    void operator+=(T);
    void operator-=(T);
    void operator*=(T);
private:
    T v_x;
    T v_y;
    friend Vector2D<T> operator+(const Vector2D<T> & other1, const Vector2D<T> & other2)
    {
        return Vector2D<T>(other1.v_x + other2.v_x, other1.v_y + other2.v_y);
    }
    friend Vector2D<T> operator-(const Vector2D<T> & other1, const Vector2D<T> & other2)
    {
        return Vector2D<T>(other1.v_x - other2.v_x, other1.v_y - other2.v_y);
    }
    friend T operator*(const Vector2D<T> & other1, const Vector2D<T> & other2)
    {
        return (other1.v_x * other2.v_x + other1.v_y * other2.v_y);
    }
    friend Vector2D<T> operator-(Vector2D<T> &other)
    {
        return Vector2D<T>(-other.v_x,-other.v_y);
    }
    friend Vector2D<T> operator*(const Vector2D &other, T i)
    {
        return Vector2D(i*other.v_x, i*other.v_y);
    }
    friend Vector2D<T> operator*(T i, const Vector2D &other)
    {
        return Vector2D(i*other.v_x, i*other.v_y);
    }
    friend bool operator==(const Vector2D<T> & other1, const Vector2D<T> & other2)
    {
        constexpr double eps = 1e-14;
        if (fabs(other1.v_x - other2.v_x) <= eps and fabs(other1.v_y - other2.v_y) <= eps)
            return 1;
        else
            return 0;
    }
    friend bool operator!=(const Vector2D<T> & other1, const Vector2D<T> & other2)
    {
        return (!(other1 == other2));
    }
    friend ostream &operator<<(ostream &os, Vector2D<T> &other)
    {
        os << "(" << other.v_x << ", " << other.v_y << ")";
        return os;
    }
};

template<class T>
void Vector2D<T>::operator+=(T i)
{
    this->v_x += i;
    this->v_y += i;
}

template<class T>
void Vector2D<T>::operator-=(T i)
{
    this->v_x -= i;
    this->v_y -= i;
}

template<class T>
void Vector2D<T>::operator*=(T i)
{
    this->v_x *= i;
    this->v_y *= i;
}

int main()
{
    Vector2D<double> v1(2,5), v2(1,3), v3 = v1 + v2, v4(v1), v5(1,1), v6;

    cout << v1 << endl << v2 << endl << v3 << endl << v4 << endl << v5 << endl << v6 << endl << v5*v1 << endl << endl;

    v1 += 3;
    v2 *= 2;
    v3 -= 5;
    v6 = v1 - v2;

    cout << v1 << endl << v2 << endl << v3 << endl << v4 << endl << v5 << endl << v6 << endl << v5*v1 << endl << endl;

    v3 = 2 * v5;
    v1 = v2 + v3;
    v6 = v4 - v5;

    cout << v1 << endl << v2 << endl << v3 << endl << v4 << endl << v5 << endl << v6 << endl << v5*v1 << endl << endl;

    return 0;
}
