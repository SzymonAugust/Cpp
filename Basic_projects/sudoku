#include <iostream>
#include <stdlib.h>
#include <time.h>

#define MINI_C 9
#define MINI_R 9
#define MAX 9
#define MIN 1

using namespace std;

class field {
public:
    bool locked;
    int value;
};

class Big_board {
public:
    field array[MINI_R][MINI_C];
};

class check_if {
public:
    int check_no_square(int x, int y)
    {
        int z;
        if (x >= 0 && x <= 2)
        {
            if (y >= 0 && y <= 2)
                z = 1;
            else if (y >= 3 && y <= 5)
                z = 2;
            else
                z = 3;
        }
        else if (x >= 3 && x <= 5)
        {
            if (y >= 0 && y <= 2)
                z = 4;
            else if (y >= 3 && y <= 5)
                z = 5;
            else
                z = 6;
        }
        else
        {
            if (y >= 0 && y <= 2)
                z = 7;
            else if (y >= 3 && y <= 5)
                z = 8;
            else
                z = 9;
        }

        return z;
    }

    bool left_right (Big_board table, int n_row, int value)
    {
        int i, score = 0, counter = 0;

        for (i = 0; i < MAX; i++)
        {
            if (table.array[n_row][i].value == value)
            {
                counter++;
            }
        }
        if (counter > 1)
            score = 1;

        return score;
    }

    bool up_down (Big_board table, int n_column, int value)
    {
        int i, score = 0, counter = 0;

        for (i = 0; i < MAX; i++)
        {
            if (table.array[i][n_column].value == value)
            {
                counter++;
            }
        }
        if (counter > 1)
            score = 1;

        return score;
    }

    bool square (Big_board table, int n_row, int n_column, int value)
    {
        int i, j, rows, columns, score = 0, counter = 0, number;
        number = check_no_square(n_row, n_column);
        columns = ((number + 2) % 3) * 3;
        rows = ((((number-1)/3)))*3;
        for (i = rows; i <= rows + 2; i++)
            for (j = columns; j <= columns + 2; j++)
                if (table.array[i][j].value == value)
                {
                    counter++;
                }
        if (counter > 1)
            score = 1;
        return score;
    }
};

void print_board (Big_board table, int *c)
{
    int a,b;

    for (a = 0; a < MINI_R; a++)
    {
        if ((*c+1) % 27 == 1 && *c != 0)
            cout << "---------------------" << endl;
        for (b = 0; b < MINI_C; b++)
        {
            if (table.array[a][b].locked == 1)
                cout << table.array[a][b].value << " ";
            else
                cout << "0 ";
            if ((b+1) % 3 == 0 and b != 8)
                cout << "| ";
            (*c)++;
        }
        cout << endl;
    }
}

void give_zeros (Big_board *n)
{
    int x,y;
    for (x = MIN-1; x < MAX; x++)
        for (y = MIN-1; y < MAX; y++)
            n->array[x][y].value = 0;
}

void randomize (Big_board *n)
{
    int i, j, surprise = 0;
    check_if ctrl;
    srand(time(NULL));

    for (i = MIN-1; i < MAX; i++)
    {
        for (j = MIN-1; j < MAX; j++)
        {
            do {
                n->array[i][j].locked = 1;
                n->array[i][j].value = (rand() % MAX) + MIN;
                surprise++;

                if (surprise == 10*MAX)
                {
                    give_zeros(n);
                    j = 0;
                    i = 0;
                }

            } while (ctrl.up_down(*n, j, n->array[i][j].value) || ctrl.left_right(*n, i, n->array[i][j].value) || ctrl.square(*n, i, j, n->array[i][j].value));
            surprise = 0;
        }
    }
}

int main (void)
{
    Big_board plansza, *p_plansza = &plansza;
    int licznik = 0, *p_licznik = &licznik;

    give_zeros(p_plansza);
    randomize(p_plansza);
    print_board(plansza, p_licznik);

    return 0;
}
